name: Run Integration Tests (Ubuntu built-in Postgres)

on:
  workflow_run:
    workflows: ["HundredX Continuous Integration"]
    types: [completed]
  workflow_dispatch:

jobs:
  integration-tests:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-24.04

    env:
      ConnectionStrings__Default: Host=localhost;Port=5432;Database=hundredx;Username=postgres;Password=postgres;Pooling=true
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: hundredx
      PGPORT: 5432

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Install psql client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Start built-in PostgreSQL and prepare DB
        run: |
          sudo systemctl start postgresql
          for i in $(seq 1 60); do
            pg_isready -h localhost -p 5432 && break
            sleep 1
          done
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          sudo -u postgres psql -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='hundredx';" | grep -q 1 \
            || sudo -u postgres createdb hundredx

      - name: Seed database from repo (if any .sql files exist)
        run: |
          if [ -d "SQLScripts" ]; then
            shopt -s nullglob
            for f in SQLScripts/*.sql; do
              echo "Seeding: $f"
              PGPASSWORD="$PGPASSWORD" psql -h localhost -U "$PGUSER" -d "$PGDATABASE" -f "$f"
            done
          else
            echo "No SQLScripts directory found; skipping seed."
          fi

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build HundredX.sln -c Release --no-restore

      # ðŸ”§ Hotfix: create a shim for the hardcoded Windows path inside the test bin folder
      - name: Windows-path shim for content root
        working-directory: ./HundredX.API.IntegrationTests
        run: |
          BIN_DIR="$(pwd)/bin/Release/net8.0"
          WIN_PATH='C:\Users\karlp\workspaces\github_workflows\repos\apiwithtests\HundredX.API'
          SHIM_DIR="$BIN_DIR/$WIN_PATH"
          # Make parent dirs, then replace with a symlink to the real API project
          mkdir -p "$SHIM_DIR"
          rmdir "$SHIM_DIR" || true
          ln -s "$GITHUB_WORKSPACE/HundredX.API" "$SHIM_DIR"
          echo "Created shim:"
          ls -la "$BIN_DIR"

      - name: Run Integration Tests
        working-directory: ./HundredX.API.IntegrationTests
        run: |
          dotnet test HundredX.API.IntegrationTests.csproj \
            -c Release \
            --no-build \
            --logger "trx;LogFileName=TestResults.trx" \
            --results-directory bin/TestResults

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: HundredX.API.IntegrationTests/bin/TestResults
