name: Run Integration Tests (Ubuntu built-in Postgres)

on:
  workflow_run:
    workflows: ["HundredX Continuous Integration"]
    types: [completed]
  workflow_dispatch:

jobs:
  integration-tests:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-24.04

    env:
      ConnectionStrings__Default: Host=localhost;Port=5432;Database=hundredx;Username=postgres;Password=postgres;Pooling=true
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: hundredx
      PGPORT: 5432

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Check if the triggering run actually has an artifact named "SQL"
      - name: Find SQL artifact in triggering run
        if: github.event_name == 'workflow_run'
        id: find_sql
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.payload.workflow_run.id;
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100,
            });
            const preferred = data.artifacts.find(a => a.name === 'SQL');
            const alt = data.artifacts.find(a => /sql/i.test(a.name)); // fallback if someone renamed it
            const found = preferred || alt;
            core.info(`Artifacts for run ${runId}: ${data.artifacts.map(a => a.name).join(', ') || '(none)'}`);
            core.setOutput('found', found ? 'true' : 'false');
            core.setOutput('name', found ? found.name : '');

      # Download ONLY if the artifact exists
      - name: Download SQLScripts artifact
        if: github.event_name == 'workflow_run' && steps.find_sql.outputs.found == 'true'
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: ${{ steps.find_sql.outputs.name }}
          path: SQLScripts

      - name: Install psql client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Start built-in PostgreSQL and prepare DB
        run: |
          sudo systemctl start postgresql
          for i in $(seq 1 60); do
            pg_isready -h localhost -p 5432 && break
            sleep 1
          done
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          sudo -u postgres psql -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='hundredx';" | grep -q 1 \
            || sudo -u postgres createdb hundredx

      - name: Seed database (if init.sql exists)
        run: |
          if [ -f "SQLScripts/init.sql" ]; then
            PGPASSWORD="$PGPASSWORD" psql -h localhost -U "$PGUSER" -d "$PGDATABASE" -f SQLScripts/init.sql
          else
            echo "No SQLScripts/init.sql found; skipping seed."
          fi

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build HundredX.sln -c Release --no-restore

      - name: Run Integration Tests
        working-directory: ./HundredX.API.IntegrationTests
        run: |
          dotnet test HundredX.API.IntegrationTests.csproj \
            -c Release \
            --no-build \
            --logger "trx;LogFileName=TestResults.trx" \
            --results-directory bin/TestResults

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: HundredX.API.IntegrationTests/bin/TestResults
